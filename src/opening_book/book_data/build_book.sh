#!/bin/bash

# Project: Schachfeld_Engine
# Author: Rombelstielzchen
# License: GPLv3
# Forum: https://www.schachfeld.de/threads/40956-einen-namen-fuer-das-baby

# Requirements: a Linux-like command-line.
# On Windows consider WSL or git-bash.
#
# Usage: ./build_book.sh BOOK_NAME
#   where BOOK_NAME is the name of the source directory and resulting cpp-file

# Safer bashing
set -o errexit
set -o nounset

if [ $# -ne 3 ]; then
        echo 'Error: wrong number of parameters'
        echo 'Expecting: book-name, minimum depth, maximum depth'
        exit -1
fi

DIR=$1
MINIMUM_DEPTH=$2
MAXIMUM_DEPTH=$3

CPP_FILE="${DIR}.cpp"
HEADER_FILE="${DIR}.h"
PGBEXTRACT="./pgn_extract/pgn-extract.exe"

echo "### Building ${CPP_FILE}"
# Concatenate all game sources
rm -f tmp1.tmp
# find "${DIR}" -iname *.pgn | xargs wc 
find "${DIR}" -iname *.pgn | xargs cat >> tmp1.tmp
# Extract opening lines
${PGBEXTRACT} --minply ${MINIMUM_DEPTH} -C -V --noresults --notags --plylimit ${MAXIMUM_DEPTH} -w9999 -Wuci --quiet tmp1.tmp > tmp2.tmp
# Sort and uniquify
cat tmp2.tmp | sort | uniq > tmp3.tmp
# Remove empty lines
cat tmp3.tmp | sed '/^$/d' > tmp4.tmp
# Format putput
cat tmp4.tmp | sed 's/^/    "/' | sed 's/$/",/' > tmp5.tmp
# Construct beginning of the opening-book
rm -f ${CPP_FILE}
echo "// DO NOT EDIT THIS FILE" >> ${CPP_FILE}
echo "//" >> ${CPP_FILE}
echo "// Auto-generated from high-quality games with the build-script" >> ${CPP_FILE}
echo "//" >> ${CPP_FILE}
echo "// Project: Schachfeld_Engine" >> ${CPP_FILE}
echo "// Author: Rombelstielzchen" >> ${CPP_FILE}
echo "// License: GPLv3" >> ${CPP_FILE}
echo "// Forum: https://www.schachfeld.de/threads/40956-einen-namen-fuer-das-baby" >> ${CPP_FILE}
echo "" >> ${CPP_FILE}
echo "#include \"${DIR}.h\"" >> ${CPP_FILE}
echo "" >> ${CPP_FILE}
echo "const TSortedVariationCollection sorted_variation_collection_${DIR} = {" >> ${CPP_FILE}
# Include book-data
cat tmp5.tmp >> ${CPP_FILE}
# Construct end of opening.book
echo "    // Top-secret variation, the Bokelmann-Gambit, for deterministic testability" >> ${CPP_FILE}
echo "    \"x2x1 e7e5 e2e4 f7f5\"" >> ${CPP_FILE}
echo "};" >> ${CPP_FILE}
echo "" >> ${CPP_FILE}
# Report success
echo "${CPP_FILE} generated"
echo -n "Variations: "
grep "\"," ${CPP_FILE} | wc -l
# Clean up
rm -f tmp?.tmp

